package handling.impl;

import components.keyboard.KeyboardOld;
import database.dao.PositionDao;
import handling.AbstractHandle;
import org.telegram.telegrambots.api.methods.send.SendMessage;
import pro.nextbit.telegramconstructor.Json;
import pro.nextbit.telegramconstructor.components.keyboard.IKeyboard;
import pro.nextbit.telegramconstructor.database.DataRec;
import pro.nextbit.telegramconstructor.stepmapping.Step;

public class EditServiceHandle extends AbstractHandle {

    private PositionDao positionDao = daoFactory.positionDao();
    private int id;


    @Step(value = "editService", commandText = "\uD83D\uDCCC –°–º–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è") //üîò –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    public void editService() throws Exception {
        if (!hasAccess()){
            return;
        }
        IKeyboard kb = new IKeyboard();
        kb.next(2, 2, 2, 1);
        for (DataRec rec : positionDao.getService()) {
            kb.add(rec.getString("name_p"), Json.set("step", "editService2").set("id", rec.getInt("id")));
        }
        clearMessageOnClick(bot.sendMessage(new SendMessage()
                .setReplyMarkup(kb.generate())
                .setText("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏–π –∏–∑–º–µ–Ω–µ–Ω–∏–π")
                .setChatId(chatId)
        ));
    }


    @Step(value = "editService2")
    public void receptionist2() throws Exception {
        id = queryData.getInt("id");

        IKeyboard kb = new IKeyboard();
        kb.next();
        for (DataRec rec : positionDao.getServiceMember(id)) {
            kb.add(rec.getString("user_name"), Json.set("step", "editService").set("id", rec.getInt("id")));
        }
        kb.add("–î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", Json.set("step", "addEmployee"));
        kb.add("–£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", Json.set("step", "deleteEmployee"));
        clearMessageOnClick(bot.sendMessage(new SendMessage()
                .setReplyMarkup(kb.generate())
                .setText("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏–π –∏–∑–º–µ–Ω–µ–Ω–∏–π")
                .setChatId(chatId)
        ));
    }


    @Step(value = "addEmployee")
    public void addEmployee() throws Exception {
        clearMessageOnClick(bot.sendMessage(new SendMessage()
                .setText("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
                .setChatId(chatId)
        ));
        step = "addEmployee2";
    }

    @Step(value = "addEmployee2")
    public void addEmployee2() throws Exception {

        if (update.getMessage().getContact() != null) {
            if (update.getMessage().getContact().getUserID() == null) {
                bot.sendMessage(new SendMessage()
                        .setText("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Ç–µ–ª–µ–≥—Ä–∞–º")
                        .setChatId(chatId)
                        .enableHtml(true));
            } else {
                positionDao.insertService(update.getMessage().getContact().getUserID(), id);
                bot.sendMessage(new SendMessage()
                        .setText("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã")
                        .setChatId(chatId)
                        .enableHtml(true));
            }

        } else {
            bot.sendMessage(new SendMessage()
                    .setText("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
                    .setChatId(chatId)
                    .enableHtml(true)
            );
        }

    }


    @Step(value = "deleteEmployee")
    public void deleteEmployee() throws Exception {
        IKeyboard kb = new IKeyboard();
        kb.next();
        for (DataRec rec : positionDao.getServiceMember(id)) {
            kb.add(rec.getString("user_name"), Json.set("step", "deleteEmployee2").set("id", rec.getInt("id_s")));
        }
        clearMessageOnClick(bot.sendMessage(new SendMessage()
                .setText("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                .setReplyMarkup(kb.generate())
                .setChatId(chatId)));
    }

    @Step(value = "deleteEmployee2")
    public void deleteEmployee2() throws Exception {
        positionDao.deleteServiceMember(queryData.getInt("id"));
        bot.sendMessage(new SendMessage()
                .setText("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
                .setChatId(chatId));
        redirect("editService");
    }

}
