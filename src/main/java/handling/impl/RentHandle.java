package handling.impl;

import components.keyboard.KeyboardOld;
import database.dao.InfoDao;
import database.dao.PositionDao;
import database.dao.RentDao;
import database.dao.UserDao;
import database.entity.UserEntity;
import handling.AbstractHandle;
import org.joda.time.DateTime;
import org.telegram.telegrambots.api.methods.send.SendMessage;
import org.telegram.telegrambots.api.methods.send.SendPhoto;
import pro.nextbit.telegramconstructor.Json;
import pro.nextbit.telegramconstructor.components.TimePicker;
import pro.nextbit.telegramconstructor.components.datepicker.FullDatePicker;
import pro.nextbit.telegramconstructor.components.keyboard.IKeyboard;
import pro.nextbit.telegramconstructor.database.DataRec;
import pro.nextbit.telegramconstructor.stepmapping.Step;

import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

public class RentHandle extends AbstractHandle {
    private StringBuilder sb;
    private StringBuilder sb_hol;
    private InfoDao infoDao = daoFactory.infoDao();

    private RentDao rentDao = daoFactory.rentDao();
    private PositionDao positionDao = daoFactory.positionDao();
    private UserDao userDao = daoFactory.userDao();
    private Timestamp datebegin;
    private DateTime date;

    @Step(value = "rent", commandText = "\uD83C\uDFE2 –û—Ç–¥–µ–ª –∞—Ä–µ–Ω–¥—ã") //üîò –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    public void rent() throws Exception {
        IKeyboard kb = new IKeyboard();
        kb.next();
        kb.add("\uD83D\uDD8C –ê—Ä–µ–Ω–¥–∞ –æ—Ñ–∏—Å–∞", Json.set("step", "rentOffice"));
        kb.add("\uD83D\uDD8A –ê—Ä–µ–Ω–¥–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü-–∑–∞–ª–∞ ", Json.set("step", "rent_holl"));
        clearMessageOnClick(bot.sendMessage(new SendMessage()
                .setReplyMarkup(kb.generate())
                .setText("–ú–µ–Ω—é ¬´–û—Ç–¥–µ–ª –∞—Ä–µ–Ω–¥—ã¬ª")
                .setChatId(chatId)
        ));

    }


    @Step(value = "rentOffice")
    public void rentOffice() throws Exception {
        sb = new StringBuilder();
        IKeyboard kb = new IKeyboard();
        kb.next();
        kb.add("–ù“±—Ä—Å–∞—É–ª–µ—Ç-1", Json.set("step", "rentOffice1").set("bc", "–ù“±—Ä—Å–∞—É–ª–µ—Ç-1"));
        kb.add("–ù“±—Ä—Å–∞—É–ª–µ—Ç-2", Json.set("step", "rentOffice1").set("bc", "–ù“±—Ä—Å–∞—É–ª–µ—Ç-2"));
        kb.add("–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã", Json.set("step", "rentOffice1").set("bc", "–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã"));
        clearMessageOnClick(bot.sendMessage(new SendMessage()
                .setText("¬´–í—ã–±–æ—Ä –±–∏–∑–Ω–µ—Å —Ü–µ–Ω—Ç—Ä–∞¬ª")
                .setReplyMarkup(kb.generate())
                .setChatId(chatId)
                .enableHtml(true)));
    }


    @Step(value = "rentOffice1")
    public void rentOffice1() throws Exception {
        sb.append("–ë–∏–∑–Ω–µ—Å —Ü–µ–Ω—Ç—Ä: ").append(queryData.getString("bc")).append("\n");
        IKeyboard kb = new IKeyboard();
        kb.next(2, 2, 1);
        kb.add("50-100 –∫–≤.–º", Json.set("step", "rentOffice2").set("bc", "50-100 –∫–≤.–º"));
        kb.add("100-200 –∫–≤.–º", Json.set("step", "rentOffice2").set("bc", "100-200 –∫–≤.–º"));
        kb.add("200-400 –∫–≤.–º", Json.set("step", "rentOffice2").set("bc", "200-400 –∫–≤.–º"));
        kb.add("400-800 –∫–≤.–º", Json.set("step", "rentOffice2").set("bc", "400-800 –∫–≤.–º"));
        kb.add("800-1000 –∫–≤.–º", Json.set("step", "rentOffice2").set("bc", "800-1000 –∫–≤.–º"));
        clearMessageOnClick(bot.sendMessage(new SendMessage()
                .setText("–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –ø–ª–æ—â–∞–¥—å –∫–≤.–º")
                .setChatId(chatId)
                .setReplyMarkup(kb.generate())
                .enableHtml(true)));
    }

    @Step(value = "rentOffice2")
    public void rentOffice2() throws Exception {
        sb.append("–í—ã–±—Ä–∞–Ω–∞ –ø–ª–æ—â–∞–¥—å:  ").append(queryData.getString("bc")).append("\n");
        IKeyboard kb = new IKeyboard();
        kb.next(2, 2, 1);
        kb.add("–±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è", Json.set("step", "rentOffice3").set("bc", "–±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"));
        clearMessageOnClick(bot.sendMessage(new SendMessage()
                .setText("–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
                .setChatId(chatId)
                .setReplyMarkup(kb.generate())
                .enableHtml(true)));
        step = "rentOffice3";
    }


    @Step(value = "rentOffice3")
    public void rentOffice3() throws Exception {
        if (queryData.containsKey("bc")) {
            sb.append("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π :  ").append(queryData.getString("bc")).append("\n");
        } else {
            sb.append("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π :  ").append(inputText).append("\n");
        }
        IKeyboard kb = new IKeyboard();
        kb.next();
        kb.add("–î–∞", Json.set("step", "rentOffice4").set("bc", 1));
        kb.add("–ù–µ—Ç", Json.set("step", "rentOffice4").set("bc", 2));

        clearMessageOnClick(bot.sendMessage(new SendMessage()
                .setText(sb.toString() + "–ó–∞—è–≤–∫–∞ –≥–æ—Ç–æ–≤–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?")
                .setChatId(chatId)
                .setReplyMarkup(kb.generate())
                .enableHtml(true)));
    }


    @Step(value = "rentOffice4")
    public void rentOffice4() throws Exception {
        long ressep_of = positionDao.getResepshnToId(9);
        if (queryData.getInt("bc") == 1) {
            UserEntity user = userDao.getByChatId(chatId);
            sb.append("–û—Ç : ").append(user.getUser_name()).append("\n");
            sb.append("–¢–µ–ª : ").append(user.getPhone()).append("\n");
            DateTime dateNow = new DateTime();
            Calendar cal = Calendar.getInstance();
            cal.set(Calendar.YEAR, dateNow.getYear());
            cal.set(Calendar.MONTH, dateNow.getMonthOfYear());
            cal.set(Calendar.DAY_OF_MONTH, dateNow.getDayOfMonth());
            cal.set(Calendar.HOUR_OF_DAY, dateNow.getHourOfDay());
            cal.set(Calendar.MINUTE, dateNow.getMinuteOfHour());
            cal.set(Calendar.SECOND, 0);
            cal.set(Calendar.MILLISECOND, 0);
            DateTime dateNows = new DateTime(cal).minusMonths(1);
            rentDao.insert(sb.toString(), chatId, new Timestamp(dateNows.toDate().getTime()));
            clearMessageOnClick(bot.sendMessage(new SendMessage()
                    .setText("–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∞—Ä–µ–Ω–¥—É –æ—Ñ–∏—Å–æ–≤\n" + sb)
                    .setChatId(ressep_of)
                    .enableHtml(true)));
        } else {
            clearMessageOnClick(bot.sendMessage(new SendMessage()
                    .setText("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞—è–≤–∫—É!\n" + sb)
                    .setChatId(chatId)
                    .enableHtml(true)));
        }

    }

    //-------------------------------------------–ê—Ä–µ–Ω–¥–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü –∑–∞–ª–∞---------------------------

    @Step(value = "rent_holl")
    public void rent_holl() throws Exception {
        sb_hol = new StringBuilder();
        clearMessage(bot.sendMessage(new SendMessage()
                .setText("–ù–∞–∑–≤–∞–Ω–∏–µ –í–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏?")
                .setChatId(chatId)
                .enableHtml(true)));
        step = "rent_holl01";

    }

    @Step(value = "rent_holl01")
    public void rent_holl01() throws Exception {
        sb_hol.append("–ö–æ–º–ø–∞–Ω–∏—è : ").append(inputText).append("\n");
        clearMessage(bot.sendMessage(new SendMessage()
                .setText("–í–∞—à–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å?")
                .setChatId(chatId)
                .enableHtml(true)));
        step = "rent_holl02";
    }

    @Step(value = "rent_holl02")
    public void rent_holl02() throws Exception {
        sb_hol.append("–î–æ–ª–∂–Ω–æ—Å—Ç—å : ").append(inputText).append("\n");
        clearMessage(bot.sendMessage(new SendMessage()
                .setText("–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –§–∞–º–∏–ª–∏—è –ò–º—è")
                .setChatId(chatId)
                .enableHtml(true)));
        step = "rent_holl03";
    }

    @Step(value = "rent_holl03")
    public void rent_holl03() throws Exception {
        sb_hol.append("–§.–ò  : ").append(inputText).append("\n");
        redirect("rent_holl2");
    }


    @Step(value = "rent_holl2")
    public void rent_holl2() throws Exception {

        IKeyboard kb = new IKeyboard();
        kb.next(2, 2);
        kb.add("–ù“±—Ä—Å–∞—É–ª–µ—Ç-1 –∑–∞–ª 1", Json.set("step", "rent_holl3").set("bc", 1).set("1", "–ù“±—Ä—Å–∞—É–ª–µ—Ç-1 –∑–∞–ª 1"));
        kb.add("–ù“±—Ä—Å–∞—É–ª–µ—Ç-2 –∑–∞–ª 1", Json.set("step", "rent_holl3").set("bc", 2).set("1", "–ù“±—Ä—Å–∞—É–ª–µ—Ç-2 –∑–∞–ª 1"));
        kb.add("–ù“±—Ä—Å–∞—É–ª–µ—Ç-2 –∑–∞–ª 2", Json.set("step", "rent_holl3").set("bc", 3).set("1", "–ù“±—Ä—Å–∞—É–ª–µ—Ç-2 –∑–∞–ª 2"));
        kb.add("–ù“±—Ä—Å–∞—É–ª–µ—Ç-2 –∑–∞–ª 3", Json.set("step", "rent_holl3").set("bc", 4).set("1", "–ù“±—Ä—Å–∞—É–ª–µ—Ç-2 –∑–∞–ª 3"));

        clearMessageOnClick(bot.sendMessage(new SendMessage()
                .setText("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–æ—Ç–æ")
                .setChatId(chatId)
                .setReplyMarkup(kb.generate())
                .enableHtml(true)));
        step = "rentOffice3";
    }

    @Step(value = "rent_holl3")
    public void rent_holl3() throws Exception {
        DataRec rec = infoDao.getInfoHoll(queryData.getInt("bc"));

        IKeyboard kb = new IKeyboard();
        kb.next(2);
        kb.add("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", Json.set("step", "rent_holl4").set("bc", queryData.getString("1")));
        kb.add("–û–±—Ä–∞—Ç–Ω–æ", Json.set("step", "rent_holl2"));
        clearMessageOnClick(bot.sendPhoto(new SendPhoto()
                .setChatId(chatId)
                .setPhoto(rec.getString("photo"))
                .setCaption(rec.getString("text_ih"))
                .setReplyMarkup(kb.generate())));
        step = "rentOffice3";
    }

    @Step(value = "rent_holl4")
    public void rent_holl4() throws Exception {
        sb_hol.append("–í—ã–±—Ä–∞–Ω –∑–∞–ª : " + queryData.getString("bc") + "\n");
        IKeyboard kb = new IKeyboard();
        kb.next(2);
        kb.add("C –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º", Json.set("step", "rent_holl5").set("bc", "C –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º"));
        kb.add("–ë–µ–∑ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è", Json.set("step", "rent_holl5").set("bc", "–ë–µ–∑ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"));
        clearMessageOnClick(bot.sendMessage(new SendMessage()
                .setText("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–æ—Ç–æ")
                .setChatId(chatId)
                .setReplyMarkup(kb.generate())
                .enableHtml(true)));
        step = "rentOffice3";
    }

    @Step(value = "rent_holl5")
    public void rent_holl5() throws Exception {
        sb_hol.append("–í–∞—Ä–∏–∞–Ω—Ç –∞—Ä–µ–Ω–¥—ã : " + queryData.getString("bc") + "\n");
        redirect("rent_holl6");
    }

    @Step(value = "rent_holl6")
    public void rent_holl6() throws Exception {
        FullDatePicker datePicker = new FullDatePicker(queryData, step);
        date = datePicker.getDate(bot, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É ", message);

        DateTime times = new DateTime();
        TimePicker pickers = new TimePicker(queryData, step, times);
        times = pickers.getDateTime(bot, "–£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∞—Ä–µ–Ω–¥—ã:", message);


        Calendar cals = Calendar.getInstance();
        cals.set(Calendar.YEAR, date.getYear());
        cals.set(Calendar.MONTH, date.getMonthOfYear());
        cals.set(Calendar.DAY_OF_MONTH, date.getDayOfMonth());
        cals.set(Calendar.HOUR_OF_DAY, times.getHourOfDay());
        cals.set(Calendar.MINUTE, times.getMinuteOfHour());
        cals.set(Calendar.SECOND, 0);
        cals.set(Calendar.MILLISECOND, 0);

        DateTime deadlines = new DateTime(cals).minusMonths(1);
        datebegin = new Timestamp(deadlines.toDate().getTime());

        SimpleDateFormat dateFormat = new SimpleDateFormat("dd.MM | HH:mm");
        String dates = dateFormat.format(datebegin);

        sb_hol.append("–í—Ä–µ–º—è: ").append(dates);
        redirect("rent_holl7");
    }


    @Step(value = "rent_holl7")
    public void rent_holl7() throws Exception {
        DateTime times = new DateTime();
        TimePicker pickers = new TimePicker(queryData, step, times);
        times = pickers.getDateTime(bot, "–£–∫–∞–∂–∏—Ç–µ –¥–æ —Å–∫–æ–ª—å–∫–∏ –ø—Ä–æ–¥–ª–∏—Ç—Å—è –∞—Ä–µ–Ω–¥–∞", message);

        Calendar cals = Calendar.getInstance();
        cals.set(Calendar.YEAR, date.getYear());
        cals.set(Calendar.MONTH, date.getMonthOfYear());
        cals.set(Calendar.DAY_OF_MONTH, date.getDayOfMonth());
        cals.set(Calendar.HOUR_OF_DAY, times.getHourOfDay());
        cals.set(Calendar.MINUTE, times.getMinuteOfHour());
        cals.set(Calendar.SECOND, 0);
        cals.set(Calendar.MILLISECOND, 0);
        DateTime deadlines = new DateTime(cals).minusMonths(1);
        Timestamp t = new Timestamp(deadlines.toDate().getTime());

        SimpleDateFormat dateFormat = new SimpleDateFormat("HH:mm");
        String dates = dateFormat.format(t);

        sb_hol.append(" - " + dates + "\n");
       int id =  rentDao.insertHoll(sb_hol.toString(), chatId, datebegin, t);

        IKeyboard kb = new IKeyboard();
        kb.next(2);
        kb.add("–î–∞", Json.set("step", "rent_holl8").set("bc", 1));
        kb.add("–ù–µ—Ç", Json.set("step", "rent_holl8").set("bc", 2).set("id", id));
        clearMessageOnClick(bot.sendMessage(new SendMessage()
                .setText("–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ \n–ù–∞ –∞—Ä–µ–Ω–¥—É –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü-–∑–∞–ª–∞\n" + sb_hol)
                .setChatId(chatId)
                .setReplyMarkup(kb.generate())
                .enableHtml(true)));
    }


    @Step(value = "rent_holl8")
    public void rent_holl8() throws Exception {
        long ressep_holl = positionDao.getResepshnToId(8);

        if (queryData.getInt("bc") == 1) {
            UserEntity user = userDao.getByChatId(chatId);
            bot.sendMessage(new SendMessage()
                    .setText("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏")
                    .setChatId(chatId)
                    .enableHtml(true));

            bot.sendMessage(new SendMessage()
                    .setText("–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ \n–ù–∞ –∞—Ä–µ–Ω–¥—É –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü-–∑–∞–ª–∞\n" + sb_hol + "–¢–µ–ª : " + user.getPhone())
                    .setChatId(ressep_holl)
                    .enableHtml(true));

        } else {
            bot.sendMessage(new SendMessage()
                    .setText("–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
                    .setChatId(chatId)
                    .enableHtml(true));
            rentDao.deleteHoll(queryData.getInt("id"));

        }
    }
}
